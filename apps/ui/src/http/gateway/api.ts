/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface FoodFindFoodResp
 */
export interface FoodFindFoodResp {
  /**
   *
   * @type {Array<FoodFood>}
   * @memberof FoodFindFoodResp
   */
  data?: Array<FoodFood>;
  /**
   *
   * @type {number}
   * @memberof FoodFindFoodResp
   */
  page?: number;
}
/**
 *
 * @export
 * @interface FoodFood
 */
export interface FoodFood {
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  calcium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  calories?: number;
  /**
   *
   * @type {string}
   * @memberof FoodFood
   */
  category?: string;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  cholesterol?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  concentrated?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  fiber?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  fnvl?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  iron?: number;
  /**
   *
   * @type {string}
   * @memberof FoodFood
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  potassium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  protein?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  rate?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  saturated?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  sodium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  sugar?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  totalCarbohydrate?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  totalFat?: number;
  /**
   *
   * @type {number}
   * @memberof FoodFood
   */
  vitaminD?: number;
}
/**
 *
 * @export
 * @interface FoodWriteFood
 */
export interface FoodWriteFood {
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  calcium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  calories?: number;
  /**
   *
   * @type {string}
   * @memberof FoodWriteFood
   */
  category?: string;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  cholesterol?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  concentrated?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  fiber?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  fnvl?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  iron?: number;
  /**
   *
   * @type {string}
   * @memberof FoodWriteFood
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  potassium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  protein?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  rate?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  saturated?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  sodium?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  sugar?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  totalCarbohydrate?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  totalFat?: number;
  /**
   *
   * @type {number}
   * @memberof FoodWriteFood
   */
  vitaminD?: number;
}
/**
 *
 * @export
 * @interface HsrDetectPostRequest
 */
export interface HsrDetectPostRequest {
  /**
   * HSR image
   * @type {File}
   * @memberof HsrDetectPostRequest
   */
  image: File;
}
/**
 *
 * @export
 * @interface HsrFindHSRIntakeResp
 */
export interface HsrFindHSRIntakeResp {
  /**
   *
   * @type {Array<HsrHSRIntake>}
   * @memberof HsrFindHSRIntakeResp
   */
  data?: Array<HsrHSRIntake>;
  /**
   *
   * @type {number}
   * @memberof HsrFindHSRIntakeResp
   */
  page?: number;
}
/**
 *
 * @export
 * @interface HsrHSRCalcBody
 */
export interface HsrHSRCalcBody {
  /**
   *
   * @type {string}
   * @memberof HsrHSRCalcBody
   */
  category?: string;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  concentratedFnvl?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  energy?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  fibre?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  fnvl?: number;
  /**
   *
   * @type {string}
   * @memberof HsrHSRCalcBody
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  protein?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  saturatedFat?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  sodium?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcBody
   */
  totalSugars?: number;
}
/**
 *
 * @export
 * @interface HsrHSRCalcResponse
 */
export interface HsrHSRCalcResponse {
  /**
   *
   * @type {number}
   * @memberof HsrHSRCalcResponse
   */
  data?: number;
}
/**
 *
 * @export
 * @interface HsrHSRDetectResp
 */
export interface HsrHSRDetectResp {
  /**
   *
   * @type {string}
   * @memberof HsrHSRDetectResp
   */
  prediction?: string;
  /**
   *
   * @type {string}
   * @memberof HsrHSRDetectResp
   */
  url?: string;
}
/**
 *
 * @export
 * @interface HsrHSRIntake
 */
export interface HsrHSRIntake {
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  calcium?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  calories?: number;
  /**
   *
   * @type {string}
   * @memberof HsrHSRIntake
   */
  category?: string;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  cholesterol?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  concentrated?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  fiber?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  fnvl?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof HsrHSRIntake
   */
  image?: string;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  iron?: number;
  /**
   *
   * @type {string}
   * @memberof HsrHSRIntake
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  potassium?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  protein?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  rate?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  saturated?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  sodium?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  sugar?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  totalCarbohydrate?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  totalFat?: number;
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntake
   */
  vitaminD?: number;
}
/**
 *
 * @export
 * @interface HsrHSRIntakeBody
 */
export interface HsrHSRIntakeBody {
  /**
   *
   * @type {number}
   * @memberof HsrHSRIntakeBody
   */
  foodId?: number;
  /**
   *
   * @type {string}
   * @memberof HsrHSRIntakeBody
   */
  userId?: string;
}

/**
 * FoodApi - axios parameter creator
 * @export
 */
export const FoodApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get list food nutrients and rate
     * @summary Get list food details api
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {FoodsGetSortEnum} [sort] Sort direction
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsGet: async (
      page?: number,
      pageSize?: number,
      sort?: FoodsGetSortEnum,
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/foods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete food nutrients and rate for custom HSR
     * @summary Delete food api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("foodsIdDelete", "id", id);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get food nutrients and rate
     * @summary Get food details api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("foodsIdGet", "id", id);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update food nutrients and rate for custom HSR
     * @summary Update food api
     * @param {number} id Food ID
     * @param {FoodWriteFood} post Update food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdPut: async (
      id: number,
      post: FoodWriteFood,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("foodsIdPut", "id", id);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("foodsIdPut", "post", post);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {FoodWriteFood} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsPost: async (
      post: FoodWriteFood,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'post' is not null or undefined
      assertParamExists("foodsPost", "post", post);
      const localVarPath = `/foods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoodApi - functional programming interface
 * @export
 */
export const FoodApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FoodApiAxiosParamCreator(configuration);
  return {
    /**
     * Get list food nutrients and rate
     * @summary Get list food details api
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {FoodsGetSortEnum} [sort] Sort direction
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async foodsGet(
      page?: number,
      pageSize?: number,
      sort?: FoodsGetSortEnum,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FoodFindFoodResp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.foodsGet(
        page,
        pageSize,
        sort,
        search,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FoodApi.foodsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Delete food nutrients and rate for custom HSR
     * @summary Delete food api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async foodsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodFood>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.foodsIdDelete(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FoodApi.foodsIdDelete"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Get food nutrients and rate
     * @summary Get food details api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async foodsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodFood>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.foodsIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FoodApi.foodsIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Update food nutrients and rate for custom HSR
     * @summary Update food api
     * @param {number} id Food ID
     * @param {FoodWriteFood} post Update food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async foodsIdPut(
      id: number,
      post: FoodWriteFood,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodFood>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.foodsIdPut(
        id,
        post,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FoodApi.foodsIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {FoodWriteFood} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async foodsPost(
      post: FoodWriteFood,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodFood>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.foodsPost(
        post,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FoodApi.foodsPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * FoodApi - factory interface
 * @export
 */
export const FoodApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FoodApiFp(configuration);
  return {
    /**
     * Get list food nutrients and rate
     * @summary Get list food details api
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {FoodsGetSortEnum} [sort] Sort direction
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsGet(
      page?: number,
      pageSize?: number,
      sort?: FoodsGetSortEnum,
      search?: string,
      options?: any,
    ): AxiosPromise<FoodFindFoodResp> {
      return localVarFp
        .foodsGet(page, pageSize, sort, search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete food nutrients and rate for custom HSR
     * @summary Delete food api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdDelete(id: number, options?: any): AxiosPromise<FoodFood> {
      return localVarFp
        .foodsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get food nutrients and rate
     * @summary Get food details api
     * @param {number} id Food ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdGet(id: number, options?: any): AxiosPromise<FoodFood> {
      return localVarFp
        .foodsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update food nutrients and rate for custom HSR
     * @summary Update food api
     * @param {number} id Food ID
     * @param {FoodWriteFood} post Update food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsIdPut(
      id: number,
      post: FoodWriteFood,
      options?: any,
    ): AxiosPromise<FoodFood> {
      return localVarFp
        .foodsIdPut(id, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {FoodWriteFood} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    foodsPost(post: FoodWriteFood, options?: any): AxiosPromise<FoodFood> {
      return localVarFp
        .foodsPost(post, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FoodApi - object-oriented interface
 * @export
 * @class FoodApi
 * @extends {BaseAPI}
 */
export class FoodApi extends BaseAPI {
  /**
   * Get list food nutrients and rate
   * @summary Get list food details api
   * @param {number} [page] Page
   * @param {number} [pageSize] Page Size
   * @param {FoodsGetSortEnum} [sort] Sort direction
   * @param {string} [search] Search term
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public foodsGet(
    page?: number,
    pageSize?: number,
    sort?: FoodsGetSortEnum,
    search?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return FoodApiFp(this.configuration)
      .foodsGet(page, pageSize, sort, search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete food nutrients and rate for custom HSR
   * @summary Delete food api
   * @param {number} id Food ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public foodsIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .foodsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get food nutrients and rate
   * @summary Get food details api
   * @param {number} id Food ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public foodsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .foodsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update food nutrients and rate for custom HSR
   * @summary Update food api
   * @param {number} id Food ID
   * @param {FoodWriteFood} post Update food body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public foodsIdPut(
    id: number,
    post: FoodWriteFood,
    options?: RawAxiosRequestConfig,
  ) {
    return FoodApiFp(this.configuration)
      .foodsIdPut(id, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Insert food nutrients and rate for custom HSR
   * @summary Create food api
   * @param {FoodWriteFood} post Create food body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public foodsPost(post: FoodWriteFood, options?: RawAxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .foodsPost(post, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const FoodsGetSortEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type FoodsGetSortEnum =
  (typeof FoodsGetSortEnum)[keyof typeof FoodsGetSortEnum];

/**
 * HSRApi - axios parameter creator
 * @export
 */
export const HSRApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Calculate food stars
     * @summary Calculate food rate
     * @param {HsrHSRCalcBody} post HSR body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrCalcPost: async (
      post: HsrHSRCalcBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'post' is not null or undefined
      assertParamExists("hsrCalcPost", "post", post);
      const localVarPath = `/hsr/calc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Detect food
     * @summary Detect food
     * @param {HsrDetectPostRequest} hsrDetectPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrDetectPost: async (
      hsrDetectPostRequest: HsrDetectPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'hsrDetectPostRequest' is not null or undefined
      assertParamExists(
        "hsrDetectPost",
        "hsrDetectPostRequest",
        hsrDetectPostRequest,
      );
      const localVarPath = `/hsr/detect`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        hsrDetectPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get list hsr intake
     * @summary Get list hsr intake api
     * @param {string} userId UserId
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrIntakesGet: async (
      userId: string,
      page?: number,
      pageSize?: number,
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("hsrIntakesGet", "userId", userId);
      const localVarPath = `/hsr/intakes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {HsrHSRIntakeBody} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrIntakesPost: async (
      post: HsrHSRIntakeBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'post' is not null or undefined
      assertParamExists("hsrIntakesPost", "post", post);
      const localVarPath = `/hsr/intakes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HSRApi - functional programming interface
 * @export
 */
export const HSRApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HSRApiAxiosParamCreator(configuration);
  return {
    /**
     * Calculate food stars
     * @summary Calculate food rate
     * @param {HsrHSRCalcBody} post HSR body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hsrCalcPost(
      post: HsrHSRCalcBody,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HsrHSRCalcResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hsrCalcPost(
        post,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["HSRApi.hsrCalcPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Detect food
     * @summary Detect food
     * @param {HsrDetectPostRequest} hsrDetectPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hsrDetectPost(
      hsrDetectPostRequest: HsrDetectPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HsrHSRDetectResp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hsrDetectPost(
        hsrDetectPostRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["HSRApi.hsrDetectPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Get list hsr intake
     * @summary Get list hsr intake api
     * @param {string} userId UserId
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hsrIntakesGet(
      userId: string,
      page?: number,
      pageSize?: number,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HsrFindHSRIntakeResp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hsrIntakesGet(
        userId,
        page,
        pageSize,
        search,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["HSRApi.hsrIntakesGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {HsrHSRIntakeBody} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hsrIntakesPost(
      post: HsrHSRIntakeBody,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HsrHSRIntake>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hsrIntakesPost(
        post,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["HSRApi.hsrIntakesPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * HSRApi - factory interface
 * @export
 */
export const HSRApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HSRApiFp(configuration);
  return {
    /**
     * Calculate food stars
     * @summary Calculate food rate
     * @param {HsrHSRCalcBody} post HSR body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrCalcPost(
      post: HsrHSRCalcBody,
      options?: any,
    ): AxiosPromise<HsrHSRCalcResponse> {
      return localVarFp
        .hsrCalcPost(post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Detect food
     * @summary Detect food
     * @param {HsrDetectPostRequest} hsrDetectPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrDetectPost(
      hsrDetectPostRequest: HsrDetectPostRequest,
      options?: any,
    ): AxiosPromise<HsrHSRDetectResp> {
      return localVarFp
        .hsrDetectPost(hsrDetectPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get list hsr intake
     * @summary Get list hsr intake api
     * @param {string} userId UserId
     * @param {number} [page] Page
     * @param {number} [pageSize] Page Size
     * @param {string} [search] Search term
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrIntakesGet(
      userId: string,
      page?: number,
      pageSize?: number,
      search?: string,
      options?: any,
    ): AxiosPromise<HsrFindHSRIntakeResp> {
      return localVarFp
        .hsrIntakesGet(userId, page, pageSize, search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Insert food nutrients and rate for custom HSR
     * @summary Create food api
     * @param {HsrHSRIntakeBody} post Create food body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hsrIntakesPost(
      post: HsrHSRIntakeBody,
      options?: any,
    ): AxiosPromise<HsrHSRIntake> {
      return localVarFp
        .hsrIntakesPost(post, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HSRApi - object-oriented interface
 * @export
 * @class HSRApi
 * @extends {BaseAPI}
 */
export class HSRApi extends BaseAPI {
  /**
   * Calculate food stars
   * @summary Calculate food rate
   * @param {HsrHSRCalcBody} post HSR body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HSRApi
   */
  public hsrCalcPost(post: HsrHSRCalcBody, options?: RawAxiosRequestConfig) {
    return HSRApiFp(this.configuration)
      .hsrCalcPost(post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Detect food
   * @summary Detect food
   * @param {HsrDetectPostRequest} hsrDetectPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HSRApi
   */
  public hsrDetectPost(
    hsrDetectPostRequest: HsrDetectPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return HSRApiFp(this.configuration)
      .hsrDetectPost(hsrDetectPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get list hsr intake
   * @summary Get list hsr intake api
   * @param {string} userId UserId
   * @param {number} [page] Page
   * @param {number} [pageSize] Page Size
   * @param {string} [search] Search term
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HSRApi
   */
  public hsrIntakesGet(
    userId: string,
    page?: number,
    pageSize?: number,
    search?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return HSRApiFp(this.configuration)
      .hsrIntakesGet(userId, page, pageSize, search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Insert food nutrients and rate for custom HSR
   * @summary Create food api
   * @param {HsrHSRIntakeBody} post Create food body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HSRApi
   */
  public hsrIntakesPost(
    post: HsrHSRIntakeBody,
    options?: RawAxiosRequestConfig,
  ) {
    return HSRApiFp(this.configuration)
      .hsrIntakesPost(post, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
